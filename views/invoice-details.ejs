<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Invoice Details</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
            background-color: #f4f4f4;
        }

        .invoice-container {
            max-width: 800px;
            margin: auto;
            padding: 20px;
            background: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .invoice-header {
            margin-bottom: 20px;
        }

        .invoice-header h1 {
            margin: 0;
        }

        .invoice-details {
            margin-bottom: 20px;
        }

        .invoice-details table {
            width: 100%;
            border-collapse: collapse;
        }

        .invoice-details th,
        .invoice-details td {
            padding: 10px;
            border: 1px solid #ddd;
        }

        .invoice-details th {
            background: #f4f4f4;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
        }

        .delete-btn {
            background-color: red;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
        }

        .delete-btn:hover {
            background-color: darkred;
        }

        .add-product-btn {
            background-color: green;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
        }

        .add-product-btn:hover {
            background-color: darkgreen;
        }

        .total-display {
            font-weight: bold;
            font-size: 1.2em;
            margin-bottom: 15px;
        }
    </style>
</head>

<body>
    <div class="invoice-container">
        <div class="invoice-header">
            <h1>Invoice <%= invoice.invoiceNumber %> Details</h1>
        </div>
        <form id="invoiceForm" method="POST">
            <!-- Invoice Information -->
            <div class="invoice-details">
                <h2>Invoice Info</h2>
                <div class="form-group">
                    <label>Invoice Number:</label>
                    <input type="text" name="invoiceNumber" value="<%= invoice.invoiceNumber %>" readonly>
                </div>
                <div class="form-group">
                    <label>Company Name:</label>
                    <input type="text" name="companyName" value="<%= invoice.companyName %>">
                </div>
                <div class="form-group">
                    <label>Address Line 1:</label>
                    <input type="text" name="addressLine1" value="<%= invoice.addressLine1 %>">
                </div>
                <div class="form-group">
                    <label>Address Line 2:</label>
                    <input type="text" name="addressLine2" value="<%= invoice.addressLine2 %>">
                </div>
                <div class="form-group">
                    <label>City:</label>
                    <input type="text" name="city" value="<%= invoice.city %>">
                </div>
                <div class="form-group">
                    <label>State:</label>
                    <input type="text" name="state" value="<%= invoice.state %>">
                </div>
                <div class="form-group">
                    <label>Zip Code:</label>
                    <input type="text" name="zipCode" value="<%= invoice.zipCode %>">
                </div>
                <div class="form-group">
                    <label>Date Created:</label>
                    <input type="date" name="dateCreated" value="<%= new Date(invoice.dateCreated).toISOString().split('T')[0] %>">
                </div>
                <div class="form-group">
                    <label>Cash Payment:</label>
                    <input type="number" name="CashPayment" step="0.01" value="<%= invoice.CashPayment %>">
                </div>
                <div class="form-group">
                    <label>Account Payment:</label>
                    <input type="number" name="AccountPayment" step="0.01" value="<%= invoice.AccountPayment %>">
                </div>
                <div class="form-group">
                    <label>Total Amount:</label>
                    <span id="totalAmount">$<%= (typeof invoice.totalAmount === 'number' ? invoice.totalAmount.toFixed(2) : parseFloat(invoice.totalAmount).toFixed(2)) %></span>
                </div>
                <div class="form-group">
                    <label>Total Balance:</label>
                    <span id="totalBalance">$<%= (typeof invoice.totalBalance === 'number' ? invoice.totalBalance.toFixed(2) : parseFloat(invoice.totalBalance).toFixed(2)) %></span>
                </div>
                <div class="form-group">
                    <label>Paid:</label>
                    <p><%= invoice.paid ? 'Yes' : 'No' %></p>
                </div>
            </div>

            <!-- Products Section -->
            <div class="invoice-details">
                <h2>Products</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Category</th>
                            <th>Quantity</th>
                            <th>Rate</th>
                            <th>Total</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="productsTableBody">
                        <% invoice.products.forEach((product, index) => { %>
                            <tr data-index="<%= index %>">
                                <td>
                                    <select name="productName" data-index="<%= index %>" class="productName" onchange="updateProductDetails(<%= index %>)">
                                        <option value="">Select Product</option>
                                        <% availableProducts.forEach(availableProduct => { %>
                                            <option value="<%= availableProduct.itemName %>" <%= product.productName === availableProduct.itemName ? 'selected' : '' %>>
                                                <%= availableProduct.itemName %>
                                            </option>
                                        <% }); %>
                                    </select>
                                </td>
                                <td><input type="text" name="productCategory" value="<%= product.productCategory %>" data-index="<%= index %>" class="productCategory" readonly></td>
                                <td><input type="number" name="quantity" value="<%= product.quantity %>" data-index="<%= index %>" class="quantity" oninput="updateProductTotal(<%= index %>)"></td>
                                <td><input type="number" name="rate" value="<%= product.rate %>" data-index="<%= index %>" class="rate" step="0.01" oninput="updateProductTotal(<%= index %>)"></td>
                                <td class="total"><%= product.total ? parseFloat(product.total).toFixed(2) : '0.00' %></td>
                                <td><button type="button" class="delete-btn" onclick="deleteProduct(<%= index %>)">Delete</button></td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
                <button type="button" class="add-product-btn" onclick="addProduct()">Add Product</button>
            </div>

            <!-- Sales Tax and Subtotal -->
            <div class="form-group">
                <label>Sales Tax:</label>
                
                <input type="number" name="salesTax" id="salesTax" step="0.01" value="<%= invoice.salesTax %>" />
            </div>

            <div class="form-group">
                <label>Subtotal:</label>
                <span id="subtotal">$<%= invoice.subtotal %></span>
            </div>


            <div class="form-group">
                <label>Total Amount:</label>
                <span id="totalAmount">$<%= (typeof invoice.totalAmount === 'number' ? invoice.totalAmount.toFixed(2) : parseFloat(invoice.totalAmount).toFixed(2)) %></span>
            </div>


            <div class="form-group">
                <button type="submit">Submit</button>
                <button type="button" onclick="printInvoice()">Print</button>
            </div>
        </form>
    </div>

    <script>
        const availableProducts = <%- JSON.stringify(availableProducts) %>;
        const customerPriceLevel = <%= customerPriceLevel %>;
        document.addEventListener('DOMContentLoaded', function () {
    // Add event listeners for all input changes to dynamically update totals and balance
    document.getElementById("salesTax").addEventListener("input", updateTotal);
    document.querySelector("input[name='CashPayment']").addEventListener("input", updateTotal);
    document.querySelector("input[name='AccountPayment']").addEventListener("input", updateTotal);
    
    // Attach event listeners for quantity and rate fields to update totals when changed
    document.querySelectorAll('#productsTableBody .quantity, #productsTableBody .rate').forEach(input => {
        input.addEventListener('input', () => {
            const index = input.dataset.index;
            updateProductTotal(index);
        });
    });

    // Update total and balance on page load
    updateTotal();
});

function updateProductTotal(index) {
    const row = document.querySelector(`tr[data-index='${index}']`);
    const quantity = parseFloat(row.querySelector(`input[name='quantity']`).value) || 0;
    const rate = parseFloat(row.querySelector(`input[name='rate']`).value) || 0;
    const total = quantity * rate;
    row.querySelector('.total').textContent = total.toFixed(2);
    updateTotal();  // Update totals whenever a product's details change
}

function updateTotal() {
    let subtotal = 0;

    // Calculate the subtotal by summing up all the product totals
    document.querySelectorAll('#productsTableBody tr').forEach(row => {
        const rowTotal = parseFloat(row.querySelector('.total').textContent) || 0;
        subtotal += rowTotal;
    });

    // Update the displayed subtotal
    document.getElementById('subtotal').innerText = "$" + subtotal.toFixed(2);

    // Get the sales tax value
    const salesTax = parseFloat(document.getElementById("salesTax").value) || 0;

    // Calculate the Total Amount (subtotal + sales tax)
    const totalAmount = subtotal + salesTax;

    // Update the displayed Total Amount
    document.getElementById("totalAmount").innerText = "$" + totalAmount.toFixed(2);

    // Update total balance after updating Total Amount
    updateTotalBalance();
}

function updateTotalBalance() {
    const totalAmount = parseFloat(document.getElementById('totalAmount').textContent.replace('$', '')) || 0;
    const cashPayment = parseFloat(document.querySelector("input[name='CashPayment']").value) || 0;
    const accountPayment = parseFloat(document.querySelector("input[name='AccountPayment']").value) || 0;

    // Calculate the total balance
    const totalBalance = totalAmount - cashPayment - accountPayment;

    // Update the displayed total balance
    document.getElementById("totalBalance").innerText = "$" + totalBalance.toFixed(2);

    // Update the 'Paid' status based on the total balance
    const paidElement = document.querySelector("p.paid-status");
    if (totalBalance === 0) {
        paidElement.innerText = "Yes";
    } else {
        paidElement.innerText = "No";
    }
}

function deleteProduct(index) {
    const row = document.querySelector(`tr[data-index='${index}']`);
    if (row) {
        row.remove();
        updateTotal();  // Recalculate totals after deleting a product
    }
}

function addProduct() {
    const tbody = document.getElementById('productsTableBody');
    const rowCount = tbody.rows.length;
    const newRow = document.createElement('tr');
    newRow.dataset.index = rowCount;
    newRow.innerHTML = `
        <td>
            <select name="productName" data-index="${rowCount}" class="productName" onchange="updateProductDetails(${rowCount})">
                <option value="">Select Product</option>
                <% availableProducts.forEach(availableProduct => { %>
                    <option value="<%= availableProduct.itemName %>"><%= availableProduct.itemName %></option>
                <% }); %>
            </select>
        </td>
        <td><input type="text" name="productCategory" data-index="${rowCount}" class="productCategory" readonly></td>
        <td><input type="number" name="quantity" data-index="${rowCount}" class="quantity" oninput="updateProductTotal(${rowCount})" placeholder="Enter Quantity"></td>
        <td><input type="number" name="rate" data-index="${rowCount}" class="rate" step="0.01" oninput="updateProductTotal(${rowCount})" placeholder="Enter Rate"></td>
        <td class="total">0.00</td>
        <td><button type="button" class="delete-btn" onclick="deleteProduct(${rowCount})">Delete</button></td>
    `;
    tbody.appendChild(newRow);

    // Attach event listener for new product's quantity and rate fields
    newRow.querySelector('.quantity').addEventListener('input', () => updateProductTotal(rowCount));
    newRow.querySelector('.rate').addEventListener('input', () => updateProductTotal(rowCount));
}

document.getElementById('invoiceForm').addEventListener('submit', function (event) {
    event.preventDefault();
    const formData = new FormData(this);
    const products = [];

    document.querySelectorAll('#productsTableBody tr').forEach((row, index) => {
        const productName = row.querySelector(`select[name='productName']`).value;
        const productCategory = row.querySelector(`input[name='productCategory']`).value.trim();
        const quantity = parseFloat(row.querySelector(`input[name='quantity']`).value);
        const rate = parseFloat(row.querySelector(`input[name='rate']`).value);
        const total = quantity * rate;

        if (productName && quantity > 0 && rate > 0) {
            products.push({
                productName,
                productCategory,
                quantity,
                rate,
                total: parseFloat(total.toFixed(2))
            });
        }
    });

    const totalAmount = parseFloat(document.getElementById('totalAmount').textContent.replace('$', ''));
    const cashPayment = parseFloat(formData.get('CashPayment')) || 0;
    const accountPayment = parseFloat(formData.get('AccountPayment')) || 0;
    const totalBalance = totalAmount - cashPayment - accountPayment;
    const paid = totalBalance === 0;

    const jsonData = {
        invoiceNumber: formData.get('invoiceNumber'),
        companyName: formData.get('companyName'),
        addressLine1: formData.get('addressLine1'),
        addressLine2: formData.get('addressLine2'),
        city: formData.get('city'),
        state: formData.get('state'),
        zipCode: formData.get('zipCode'),
        dateCreated: formData.get('dateCreated'),
        CashPayment: cashPayment,
        AccountPayment: accountPayment,
        salesTax: parseFloat(formData.get('salesTax')),
        subtotal: parseFloat(document.getElementById('subtotal').textContent.replace('$', '')),
        totalAmount: totalAmount,
        totalBalance: totalBalance,
        paid: paid,
        products: products
    };

    fetch(window.location.pathname, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(jsonData)
    }).then(response => {
        if (response.ok) {
            window.location.reload();
        } else {
            response.text().then(text => {
                alert('Error updating invoice: ' + text);
            });
        }
    }).catch(error => {
        alert('Error updating invoice: ' + error);
    });
});

        
        function updateProductDetails(index) {
    const productName = document.querySelector(`select[name='productName'][data-index='${index}']`).value;
    const product = availableProducts.find(item => item.itemName === productName);

    if (product) {
        // Update the product category field
        document.querySelector(`input[name='productCategory'][data-index='${index}']`).value = product.itemCategory;

        // Set the price level based on the customer's price level
        const priceKey = `priceLevel${customerPriceLevel}`;
        if (product[priceKey]) {
            document.querySelector(`input[name='rate'][data-index='${index}']`).value = product[priceKey].toFixed(2);
        } else {
            document.querySelector(`input[name='rate'][data-index='${index}']`).value = '0.00';
        }
    } else {
        document.querySelector(`input[name='productCategory'][data-index='${index}']`).value = '';
        document.querySelector(`input[name='rate'][data-index='${index}']`).value = '0.00';
    }

    updateProductTotal(index);
}
        
        document.getElementById("salesTax").addEventListener("input", updateTotal);

        function printInvoice() {
            window.print();
        }

        updateTotal();
    </script>
</body>

</html>
