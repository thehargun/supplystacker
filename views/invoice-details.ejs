<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Invoice Details</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
            background-color: #f4f4f4;
        }
        .invoice-container {
            max-width: 800px;
            margin: auto;
            padding: 20px;
            background: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .invoice-header {
            margin-bottom: 20px;
        }
        .invoice-header h1 {
            margin: 0;
        }
        .invoice-details {
            margin-bottom: 20px;
        }
        .invoice-details table {
            width: 100%;
            border-collapse: collapse;
        }
        .invoice-details th, .invoice-details td {
            padding: 10px;
            border: 1px solid #ddd;
        }
        .invoice-details th {
            background: #f4f4f4;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
        }
        .form-group input, .form-group textarea {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
        }
        .delete-btn {
            background-color: red;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
        }
        .delete-btn:hover {
            background-color: darkred;
        }
        .add-product-btn {
            background-color: green;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
        }
        .add-product-btn:hover {
            background-color: darkgreen;
        }
        .total-display {
            font-weight: bold;
            font-size: 1.2em;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="invoice-container">
        <div class="invoice-header">
            <h1>Invoice 2024 Details</h1>
        </div>
        <form id="invoiceForm" method="POST">
            <div class="invoice-details">
                <h2>Invoice Info</h2>
                <div class="form-group">
                    <label>Invoice Number:</label>
                    <input type="text" name="invoiceNumber" value="<%= invoice.invoiceNumber %>">
                </div>
                <div class="form-group">
                    <label>Company Name:</label>
                    <input type="text" name="companyName" value="<%= invoice.companyName %>">
                </div>
                <div class="form-group">
                    <label>Address Line 1:</label>
                    <input type="text" name="addressLine1" value="<%= invoice.addressLine1 %>">
                </div>
                <div class="form-group">
                    <label>Address Line 2:</label>
                    <input type="text" name="addressLine2" value="<%= invoice.addressLine2 %>">
                </div>
                <div class="form-group">
                    <label>City:</label>
                    <input type="text" name="city" value="<%= invoice.city %>">
                </div>
                <div class="form-group">
                    <label>State:</label>
                    <input type="text" name="state" value="<%= invoice.state %>">
                </div>
                <div class="form-group">
                    <label>Zip Code:</label>
                    <input type="text" name="zipCode" value="<%= invoice.zipCode %>">
                </div>
                <div class="form-group">
                    <label>Date Created:</label>
                    <input type="date" name="dateCreated" value="<%= new Date(invoice.dateCreated).toISOString().split('T')[0] %>">
                </div>
                <div class="form-group">
                    <label>Cash Payment:</label>
                    <input type="number" name="CashPayment" step="0.01" value="<%= invoice.CashPayment %>">
                </div>
                <div class="form-group">
                    <label>Account Payment:</label>
                    <input type="number" name="AccountPayment" step="0.01" value="<%= invoice.AccountPayment %>">
                </div>
                <div class="form-group">
                    <label>Invoice Total:</label>
                    <p>$<%= (typeof invoice.totalAmount === 'number' ? invoice.totalAmount.toFixed(2) : parseFloat(invoice.totalAmount).toFixed(2)) %></p>
                </div>   
                <div class="form-group">
                    <label>Total Balance:</label>
                    <p>$<%= (typeof invoice.totalBalance === 'number' ? invoice.totalBalance.toFixed(2) : parseFloat(invoice.totalBalance).toFixed(2)) %></p>
                </div>                
                <div class="form-group">
                    <label>Paid:</label>
                    <p><%= invoice.paid ? 'Yes' : 'No' %></p>
                </div>
            </div>

            <div class="invoice-details">
                <h2>Products</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Category</th>
                            <th>Quantity</th>
                            <th>Rate</th>
                            <th>Total</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="productsTableBody">
                        <% invoice.products.forEach((product, index) => { %>
                            <tr data-index="<%= index %>">
                                <td><%= product.productName %></td>
                                <td><%= product.productCategory %></td>
                                <td><input type="number" name="quantity" value="<%= product.quantity %>" data-index="<%= index %>" class="quantity" oninput="updateProductTotal(<%= index %>)"></td>
                                <td><input type="number" name="rate" value="<%= product.rate %>" data-index="<%= index %>" class="rate" step="0.01" oninput="updateProductTotal(<%= index %>)"></td>
                                <td class="total"><%= product.total %></td>
                                <td><button type="button" class="delete-btn" onclick="deleteProduct(<%= index %>)">Delete</button></td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
                <button type="button" class="add-product-btn" onclick="addProduct()">Add Product</button>
            </div>

            <!-- Editable Sales Tax -->
            <div class="form-group">
                <label>Sales Tax:</label>
                <input type="number" name="salesTax" id="salesTax" step="0.01" value="<%= invoice.salesTax %>" onchange="updateTotal()" />
            </div>

            <!-- Subtotal -->
            <div class="form-group">
                <label>Subtotal:</label>
                <span id="subtotal">$<%= invoice.subtotal %></span>
            </div>

            <!-- Total Amount -->
            <div class="form-group">
                <label>Total Amount:</label>
                <span id="totalAmount">$<%= (parseFloat(invoice.subtotal) + parseFloat(invoice.salesTax)).toFixed(2) %></span>
            </div>

            <div>
                <input type="text" id="priceMultiplier" placeholder="Enter price multiplier">
                <button type="button" id="increasePriceButton">Increase Price</button>
            </div>
            <div class="form-group">
                <button type="submit">Submit</button>
                <button type="button" onclick="printInvoice()">Print</button>
            </div>
        </form>
    </div>

    <script>
        function updateTotal() {
            let subtotal = 0;

            // Calculate the subtotal by summing up all the product totals
            document.querySelectorAll('#productsTableBody tr').forEach(row => {
                const rowTotal = parseFloat(row.querySelector('.total').textContent) || 0;
                subtotal += rowTotal;
            });

            // Update the displayed subtotal
            document.getElementById('subtotal').innerText = "$" + subtotal.toFixed(2);

            // Get the sales tax value
            const salesTax = parseFloat(document.getElementById("salesTax").value) || 0;

            // Calculate the total amount (subtotal + sales tax)
            const totalAmount = subtotal + salesTax;

            // Update the displayed total amount
            document.getElementById("totalAmount").innerText = "$" + totalAmount.toFixed(2);
        }

        // Update total on page load
        updateTotal();

        document.getElementById('invoiceForm').addEventListener('submit', function (event) {
            event.preventDefault();
            const formData = new FormData(this);
            const products = [];
            document.querySelectorAll('#productsTableBody tr').forEach((row, index) => {
                const productName = row.querySelector(`select[name='productName']`) ? row.querySelector(`select[name='productName']`).value : row.cells[0].textContent;
                const productCategory = row.cells[1].textContent;
                const quantity = row.querySelector(`input[name='quantity']`).value;
                const rate = row.querySelector(`input[name='rate']`).value;
                const total = quantity * rate;
                products.push({ productName, productCategory, quantity: parseInt(quantity), rate: parseFloat(rate), total: parseFloat(total.toFixed(2)) });
            });
            let dateCreated = new Date(formData.get('dateCreated'));
            dateCreated.setDate(dateCreated.getDate() + 1);
            const formattedDate = dateCreated.toISOString().split('T')[0];

            const jsonData = {
                invoiceNumber: formData.get('invoiceNumber'),
                companyName: formData.get('companyName'),
                addressLine1: formData.get('addressLine1'),
                addressLine2: formData.get('addressLine2'),
                city: formData.get('city'),
                state: formData.get('state'),
                zipCode: formData.get('zipCode'),
                dateCreated: formattedDate,
                CashPayment: formData.get('CashPayment'),
                AccountPayment: formData.get('AccountPayment'),
                products: JSON.stringify(products)  // Convert products to JSON string
            };

            fetch(window.location.pathname, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            }).then(response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    response.text().then(text => {
                        alert('Error updating invoice: ' + text);
                    });
                }
            }).catch(error => {
                alert('Error updating invoice: ' + error);
            });
        });

        function printInvoice() {
            const formData = new FormData(document.getElementById('invoiceForm'));
            const products = [];
            document.querySelectorAll('#productsTableBody tr').forEach((row, index) => {
                const productName = row.querySelector(`select[name='productName']`) ? row.querySelector(`select[name='productName']`).value : row.cells[0].textContent;
                const productCategory = row.cells[1].textContent;
                const quantity = row.querySelector(`input[name='quantity']`).value;
                const rate = row.querySelector(`input[name='rate']`).value;
                const total = quantity * rate;
                products.push({ productName, productCategory, quantity: parseInt(quantity), rate: parseFloat(rate), total: parseFloat(total.toFixed(2)) });
            });

            let dateCreated = new Date(formData.get('dateCreated'));
            dateCreated.setDate(dateCreated.getDate() - 1);
            const formattedDate = dateCreated.toISOString().split('T')[0];

            const invoiceDetails = {
                invoiceNumber: formData.get('invoiceNumber'),
                companyName: formData.get('companyName'),
                addressLine1: formData.get('addressLine1'),
                addressLine2: formData.get('addressLine2'),
                city: formData.get('city'),
                state: formData.get('state'),
                zipCode: formData.get('zipCode'),
                dateCreated: formattedDate,  // Ensure the subtracted date is used here
                CashPayment: formData.get('CashPayment'),
                AccountPayment: formData.get('AccountPayment'),
                products: products,
                totalBalance: parseFloat(document.getElementById('totalAmount').textContent.replace('$', ''))
            };

            fetch(`/admin/invoices/print/${invoiceDetails.invoiceNumber}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(invoiceDetails)
            }).then(response => {
                if (response.ok) {
                    alert('Invoice printed and emailed successfully.');
                } else {
                    response.text().then(text => {
                        alert('Error printing invoice: ' + text);
                    });
                }
            }).catch(error => {
                alert('Error printing invoice: ' + error);
            });
        }

        // Update total on page load
        updateTotal();

        // Add Increase Price functionality
        document.getElementById('increasePriceButton').addEventListener('click', function () {
            const multiplier = parseFloat(document.getElementById('priceMultiplier').value);
            if (!isNaN(multiplier)) {
                const products = document.querySelectorAll('#productsTableBody tr');
                products.forEach(product => {
                    const rateElement = product.querySelector('input.rate');
                    const totalElement = product.querySelector('.total');
                    const quantity = parseFloat(product.querySelector('input.quantity').value);
                    let rate = parseFloat(rateElement.value);
                    rate *= multiplier;
                    rate = roundToNearestQuarter(rate);
                    rateElement.value = rate.toFixed(2);
                    totalElement.textContent = (rate * quantity).toFixed(2);
                });
                updateTotal();
            } else {
                alert('Please enter a valid number');
            }
        });

        function roundToNearestQuarter(value) {
            return Math.round(value * 4) / 4;
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const invoiceForm = document.getElementById('invoiceForm');
            const quantityInputs = document.querySelectorAll('.quantity');
            const rateInputs = document.querySelectorAll('.rate');
            const salesTaxElement = document.getElementById('salesTax');
            const subtotalElement = document.getElementById('subtotal');
            const totalElement = document.getElementById('totalAmount');

            // Flag to prevent unnecessary recalculation during initialization
            let isInitialized = false;

            // Function to update invoice values
            function updateInvoice() {
                if (!isInitialized) {
                    return; // Skip recalculation if still initializing
                }

                let subtotal = 0;

                quantityInputs.forEach((input, index) => {
                    const quantity = parseFloat(input.value) || 0;
                    const rate = parseFloat(rateInputs[index].value) || 0;
                    const itemSubtotal = quantity * rate;

                    // Update individual product subtotal
                    const productTotalElement = document.getElementById(`product-total-${index}`);
                    if (productTotalElement) {
                        productTotalElement.innerText = itemSubtotal.toFixed(2);
                    }
                    subtotal += itemSubtotal;
                });

                let salesTax = parseFloat(salesTaxElement.value);
                if (isNaN(salesTax) || salesTax < 0) {
                    salesTax = 0; // Ensure a valid sales tax value
                }

                console.log("Subtotal after calculation: ", subtotal);
                console.log("Sales Tax Before Calculation: ", salesTax);

                const total = subtotal + salesTax;

                console.log("Total after calculation: ", total);

                // Update subtotal and total elements
                subtotalElement.innerText = "$" + subtotal.toFixed(2);
                totalElement.innerText = "$" + total.toFixed(2);
            }

            // Attach event listeners to inputs to update invoice when changed
            quantityInputs.forEach(input => {
                input.addEventListener('input', updateInvoice);
            });

            rateInputs.forEach(input => {
                input.addEventListener('input', updateInvoice);
            });

            salesTaxElement.addEventListener('input', updateInvoice);

            // Update values on page load with initial data
            function initializeInvoice() {
                let subtotal = parseFloat("<%= invoice.subtotal %>") || 0;
                let salesTax = parseFloat("<%= invoice.salesTax %>") || 0;
                let totalAmount = parseFloat("<%= invoice.totalAmount %>") || 0;

                console.log("Initializing invoice with values - Subtotal: ", subtotal, ", Sales Tax: ", salesTax, ", Total Amount: ", totalAmount);

                subtotalElement.innerText = "$" + subtotal.toFixed(2);
                totalElement.innerText = "$" + totalAmount.toFixed(2);
                salesTaxElement.value = salesTax.toFixed(2);

                // Mark initialization as complete
                isInitialized = true;
            }

            // Initialize invoice with existing values from data
            initializeInvoice();

            // On form submit, explicitly set salesTax and recalculate totalAmount before submitting the form
            invoiceForm.addEventListener('submit', function(event) {
                event.preventDefault(); // Prevent default form submission to verify data first

                quantityInputs.forEach((input, index) => {
                    const productNameElement = document.querySelector(`#productsTableBody tr[data-index="${index}"] .product-name`);
                    const productCategoryElement = document.querySelector(`#productsTableBody tr[data-index="${index}"] .product-category`);

                    input.setAttribute('name', `products[${index}][quantity]`);
                    rateInputs[index].setAttribute('name', `products[${index}][rate]`);
                    if (productNameElement) {
                        productNameElement.setAttribute('name', `products[${index}][productName]`);
                    }
                    if (productCategoryElement) {
                        productCategoryElement.setAttribute('name', `products[${index}][productCategory]`);
                    }
                });

                salesTaxElement.setAttribute('name', 'salesTax');
                salesTaxElement.value = parseFloat(salesTaxElement.value) || 0;

                let subtotal = parseFloat(subtotalElement.innerText.replace('$', '')) || 0;
                let totalAmount = subtotal + parseFloat(salesTaxElement.value);
                totalElement.innerText = "$" + totalAmount.toFixed(2);
                console.log("Total Amount Before Submission: ", totalAmount);

                // Submit the form after setting totalAmount explicitly
                invoiceForm.submit();
            });
        });
    </script>
    </body>
    
</html>
